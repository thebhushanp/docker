Log mngment
Res mngment(CPU/RAM)
External config -> etcd
Alerting/monitoring -> Prometheus
Jenkins pipeline
Deployment
	Rolling update
	Canary deployment
	Blue/green deployment
Multi technology microservices
Docker auto deployment using DockerHub build

Demo
	- What it is
	- 
	
	
ToDo
	buildon in dockerfile
	how to use dockerhub's auto-build alternative to nexus
	
	
	
#To force delete
docker rmi -f imagename/imageid

#push to dockerhub
1. create a image
docker build -t myimagename .
2. tag the image
docker tag imageid dockerhub_username/dockerhub_repo_name:tag
3. push the image to DH
docker push dockerhub_username/dockerhub_repo_name:tag

#To run container and delete afterward
docker run --rm -p 8888:8888 thebhushanp/k8:firsttry

#No cache option while building the image
docker build --no-cache -t myimagename

# microk8s
sudo snap install microk8s --classic
# add addons
microk8s.enable dns
microk8s.enable dashboard
microk8s.enable ingress

#access dashboard
microk8s.kubectl proxy --accept-hosts=.* --address=0.0.0.0
microk8s.kubectl proxy --accept-hosts=.* --address=0.0.0.0 & (if want to run in backgroud)
- to proxy dashboard to localhost
netsh interface portproxy add v4tov4 listenport=8001 listenaddress=127.0.0.1 connectport=8001 connectaddress=34.67.40.96
ssh -L 8001:127.0.0.1:8001 192.0.2.10 (for Linux)
- get secret
token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d " " -f1)
microk8s.kubectl -n kube-system describe secret $token

#create deployment
microk8s.kubectl create deployment microbot --image=dontrebootme/microbot:v1
microk8s.kubectl scale deployment microbot --replicas=2

# to update deployment
microk8s.kubectl scale deployment microbot --replicas=0
microk8s.kubectl scale deployment microbot --replicas=1


#create service
microk8s.kubectl expose deployment microbot --type=NodePort --port=80 --name=microbot-service

# get all resource
microk8s.kubectl get all --all-namespaces

# readyness prob
    spec:
      containers:
        - name: k8
          image: 'thebhushanp/k8:ft1.0.1'
          resources: {}
          readinessProbe:
            httpGet:
              path: /api/hello
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 2
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 1
## rollback
- get history
	microk8s.kubectl rollout history deployment.apps/microbot
- Rollback to the previous deployed version
	microk8s.kubectl rollout undo deployment.apps/microbot
- Rollback to a specific previously deployed version
	microk8s.kubectl rollout undo deployment.apps/microbot --to-revision 21

# load testing
apt-get install apache2-utils
ab -n 100 -c 10  http://127.0.0.1:8080/hello

??? rolling update(done)
??? rollback(done)
??? access service on same port(proper gateway)
??? health monitoring(dont send trafic to this app unless in spring boot) ?
??? autoscale
??? autobuild in dockerhub (done, not useful)
??? service and deployment files
??? config(external)
??? cluster health,charts, notification if service not working or 500
??? Helm
??? how to set profile to docker image
??? access host's DB
??? write logs to volume

http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#/login
microk8s.kubectl expose deployment microbot --type=NodePort --port=8888 --name=microbot-service

microk8s.kubectl --record deployment.apps/microbot set image deployment.v1.apps/microbot microbot=thebhushanp/k8:firsttry


https://learnk8s.io/kubernetes-rollbacks
https://learnk8s.io/kubernetes-ingress-api-gateway
https://dimitr.im/spring-boot-kubernetes

# enable ingress
microk8s.kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml

ingress.yml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: k8s-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:       
  rules:
    - http:
        paths:
          - path: /en(/|$)(.*)
            backend:
              serviceName: d1-service
              servicePort: 8888
          - path: /es(/|$)(.*)
            backend:
              serviceName: d2-service
              servicePort: 8888
